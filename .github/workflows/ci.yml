name: Test and Analyze Smart Contracts

on:
  push:
    branches:
      - "dev"

jobs:
  tests:
    runs-on: ubuntu-24.04
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Python pour Slither
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      # Étape 3 : Installation de Slither et des dépendances
      - name: Install Slither and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y solc
          pip install slither-analyzer

      # Étape 4 : Vérification et préparation du fichier de configuration Slither
      - name: Ensure Slither Config Exists
        run: |
          echo '{ "exclude": ["low-level-calls", "solc-version"] }' > slither.config.json

      # Étape 5 : Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.11.0

      # Étape 6 : Mise en cache des modules Yarn
      - name: Cache Yarn Modules
        id: cache-yarn-modules
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            node_modules
            ~/.yarn
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-cache-

      # Étape 7 : Installation des dépendances avec Yarn
      - name: Install Dependencies
        if: steps.cache-yarn-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      # Étape 8 : Nettoyage et compilation des contrats
      - name: Clean and Compile Contracts
        run: |
          yarn hardhat clean
          yarn hardhat compile

      # Étape 9 : Analyse avec Slither
      - name: Run Slither Analysis
        run: slither . --config-file slither.config.json || true

      # Étape 10 : Exécution des tests Hardhat
      - name: Run Hardhat Tests
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          METAMASK_PRIVATE_KEY: ${{ secrets.METAMASK_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: yarn hardhat test
