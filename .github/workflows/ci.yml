name: Test and Analyze Smart Contracts

on:
  push:
    branches:
      - 'dev'

jobs:
  tests:
    runs-on: ubuntu-24.04
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Python pour Slither
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Étape 3 : Installation de Slither et des dépendances
      - name: Install Slither and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y solc
          pip install slither-analyzer

      # Étape 4 : Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.11.0

      # Étape 5 : Installation des dépendances avec Yarn
      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      # Étape 6 : Nettoyage des contrats
      - name: Run Hardhat Clean
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          METAMASK_PRIVATE_KEY: ${{ secrets.METAMASK_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: yarn hardhat clean

      # Étape 7 : Compilation des contrats
      - name: Compile Contracts
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          METAMASK_PRIVATE_KEY: ${{ secrets.METAMASK_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: yarn hardhat compile

      # Étape 8 : Analyse avec Slither
      - name: Run Slither Analysis
        run: slither . || true

      # Étape 9 : Exécution des tests Hardhat
      - name: Run Hardhat Tests
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          METAMASK_PRIVATE_KEY: ${{ secrets.METAMASK_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: yarn hardhat test
