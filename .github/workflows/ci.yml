# Nom du workflow - identifie ce workflow parmi d'autres dans le projet
name: Test Suite

# Définit les événements qui déclenchent l'exécution de ce workflow
on:
  push:
    branches:
      - 'dev'  # Déclenche le workflow sur la branche dev

# Définition des jobs à exécuter dans ce workflow
jobs:
  # Définition d'un job nommé "tests"
  tests:
    # Nom lisible du job, affiché dans l'interface GitHub Actions
    name: Smart Contract Tests
    # Spécifie l'environnement d'exécution - ici, la dernière version d'Ubuntu
    runs-on: ubuntu-latest
    # Liste ordonnée des étapes à exécuter dans ce job
    steps:
      # Étape 1 : Récupération du code source du dépôt
      - name: Checkout Repository
        uses: actions/checkout@v3  # Utilise l'action officielle GitHub pour cloner le dépôt

      # Étape 2 : Configuration de l'environnement Node.js
      - name: Use Node.js 22.11.0
        uses: actions/setup-node@v3  # Utilise l'action officielle pour configurer Node.js
        with:
          node-version: 22.11.0  # Spécifie la version exacte de Node.js à utiliser

      # Étape 3 : Mise en cache des modules Yarn pour accélérer les builds futurs
      - name: Cache Yarn Modules
        id: cache-yarn-modules  # Identifiant unique pour cette étape, utilisé pour la condition de l'étape suivante
        uses: actions/cache@v2  # Utilise l'action de cache officielle de GitHub
        with:
          path: .yarn/cache  # Chemin des fichiers à mettre en cache
          key: yarn-cache-${{ hashFiles('yarn.lock') }}  # Clé unique basée sur le contenu de yarn.lock

      # Étape 4 : Installation des dépendances du projet
      - name: Install dependencies
        # Condition : exécute cette étape seulement si le cache n'a pas été trouvé (évite une réinstallation inutile)
        if: steps.cache-yarn-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile  # Installation propre et reproductible avec Yarn

      # Étape 5 : Exécution des tests des smart contracts
      - name: Run Tests
        run: npx hardhat test  # Exécute les tests avec Hardhat et Yarn
